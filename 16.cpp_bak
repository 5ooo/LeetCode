#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <vector>
#include <utility>

using namespace std;

vector<int> vTest;

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        //pair<DValue, num>
        vector<pair<int, int> > vResult;
        int nMaxDValueIdx;
		
		for (int i = 0; i < nums.size(); i++)
		{
			int nDValue = abs(nums[i] - target);

            if (i < 3)
            {
                vResult.push_back(make_pair(nDValue, nums[i]));
                nMaxDValueIdx = getMaxDValueIdx(vResult);
                continue;
            }

            if (vResult[nMaxDValueIdx].first > nDValue)
            {
                vResult[nMaxDValueIdx].first = nDValue;
                vResult[nMaxDValueIdx].second = nums[i];
                nMaxDValueIdx = getMaxDValueIdx(vResult); 
            }

		}

        return vResult[0].second + vResult[1].second + vResult[2].second;
    }

    int getMaxDValueIdx(vector<pair<int, int> > &vParam)
    {
        int nSize = vParam.size();
        if (vParam.size() <= 0)
            return -1;
    
        int ret = 0;
        int nMaxDValue = abs(vParam[0].first);

        for (int i = 1; i < nSize; i++)
        {
            int nTmp = abs(vParam[i].first);
            if (nMaxDValue < nTmp)
            {        
                nMaxDValue = nTmp;
                ret = i;
            }
        }

        return ret;
    }
};

int main()
{
    //[-1, 2, 1, -4]
	vTest.push_back(-1);	
	vTest.push_back(2);	
	vTest.push_back(1);	
	vTest.push_back(-4);	

	Solution s;

	printf("%d\n", s.threeSumClosest(vTest, 1));

	return 0;
}
